" Watch: youtube.com/watch?v=XA2WjJbmmoM
set ttimeout
set ttimeoutlen=1
set ttyfast
set nocompatible
set termguicolors
" Read: https://vim.fandom.com/wiki/Avoid_the_escape_key#Use_Alt/Meta_In_a_Terminal
" Read: https://vimhelp.org/term.txt.html#terminal-options
" Read(slow &t_EI): https://stackoverflow.com/a/58042714
" Note: This should be set after `set termguicolors` or `set t_Co=256`.
if &term =~ 'xterm' || &term == 'win32'
" Use DECSCUSR escape sequences
    let &t_SI = "\e[5 q"      " blink bar
    let &t_SR = "\e[3 q"      " blink underline
    let &t_EI = "\e[1 q"      " blink block
    let &t_ti ..= "\e[1 q"    " blink block
    let &t_te ..= "\e[0 q"    " default (depends on terminal, normally blink block)
endif
" To explicitly use dark variant of gruvbox, uncomment the next 2 lines
set background=dark
colorscheme catppuccin_mocha

set hidden
set noswapfile
set backspace=indent,eol,start
set shiftwidth=4 tabstop=4 softtabstop=4 expandtab autoindent smartindent

" enable syntax and plugins (for netrw)
syntax enable
filetype plugin indent on

" search down into the subfolders
" provides tab-compeltion for file operations
set path+=**

" display all matching files when we tab-complete
set wildmenu

set number
set relativenumber
set cursorline

" netrw tweaks
let g:netrw_banner=0
let g:netrw_browse_split=3
" let g:netrw_browse_split=4
let g:netrw_altv=1
let g:netrw_liststyle=4
" let g:netrw_winsize=25
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\*'
" Refer: https://stackoverflow.com/questions/8730702/how-do-i-configure-vimrc-so-that-line-numbers-display-in-netrw-in-vim
let g:netrw_bufsettings = 'noma nomod nu nobl nowrap ro'
autocmd BufEnter * silent! lcd %:p:h

" Vim hard mode; disable arrow keys and backspace key; makes your life harder
" set backspace=0

nnoremap <buffer> <Left> <Esc>
nnoremap <buffer> <Right> <Esc>
nnoremap <buffer> <Up> <Esc>
nnoremap <buffer> <Down> <Esc>
nnoremap <buffer> <PageUp> <Esc>
nnoremap <buffer> <PageDown> <Esc>

inoremap <buffer> <Left> <Esc>
inoremap <buffer> <Right> <Esc>
inoremap <buffer> <Up> <Esc>
inoremap <buffer> <Down> <Esc>
inoremap <buffer> <PageUp> <Esc>
inoremap <buffer> <PageDown> <Esc>

vnoremap <buffer> <Left> <Esc>
vnoremap <buffer> <Right> <Esc>
vnoremap <buffer> <Up> <Esc>
vnoremap <buffer> <Down> <Esc>
vnoremap <buffer> <PageUp> <Esc>
vnoremap <buffer> <PageDown> <Esc>

let g:mapleader = ","
inoremap <leader><leader> <Esc>
vnoremap <leader><leader> <Esc>
nnoremap <leader><leader> <Esc>

" nnoremap <leader>py :-1read $HOME/.vim/snippets/.skeleton.py<CR>
" nnoremap <leader>c :-1read $HOME/.vim/snippets/.skeleton.c<CR>
" nnoremap <leader>java :-1read $HOME/.vim/snippets/.skeleton.java<CR>

" Read: https://www.amd.com/content/dam/amd/en/documents/txt/aocc-4.1.0-readme.txt
" You can find more about these global variables in clan-format.py
let g:clang_format_path="/opt/AMD/aocc-compiler-4.1.0/bin/clang-format"
let g:clang_format_fallback_style="GNU"

" Read: https://black.readthedocs.io/en/stable/integrations/editors.html#vim-8-native-plugin-management
" Read: https://clang.llvm.org/docs/ClangFormat.html#vim-integration
augroup format
    autocmd!
    autocmd BufWritePre *.py execute ":Black"
    autocmd BufWritePre *.c,*.cc,*.cpp,*.cxx,*.h,*.java,*.js,*.json execute ":py3file /opt/AMD/aocc-compiler-4.1.0/share/clang/clang-format.py"
augroup END

if has('python')
    map <C-I> :pyf /opt/AMD/aocc-compiler-4.1.0/share/clang/clang-format.py<cr>
    imap <C-I> <c-o>:pyf /opt/AMD/aocc-compiler-4.1.0/share/clang/clang-format.py<cr>
elseif has('python3')
    map <C-I> :py3f /opt/AMD/aocc-compiler-4.1.0/share/clang/clang-format.py<cr>
    imap <C-I> <c-o>:py3f /opt/AMD/aocc-compiler-4.1.0/share/clang/clang-format.py<cr>
endif

" augroup ProjectDrawer
"   autocmd!
"   autocmd VimEnter * :Vexplore
" augroup END

" Read: https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Read: https://github.com/junegunn/vim-plug#example
call plug#begin()
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'

" Make sure you use single quotes
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }

call plug#end()

nnoremap <C-p> :FZF<CR>
set hlsearch
nnoremap <silent> <leader><space> :nohlsearch<CR>

" Customize fzf colors to match your color scheme
" - fzf#wrap translates this to a set of `--color` options
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history
" - History files will be stored in the specified directory
" - When set, CTRL-N and CTRL-P will be bound to 'next-history' and
"   'previous-history' instead of 'down' and 'up'.
let g:fzf_history_dir = '~/.local/share/fzf-history'
