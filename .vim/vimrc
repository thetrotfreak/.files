" NOTE: youtube.com/NOTE?v=XA2WjJbmmoM
set autoread
set cscoperelative
set hlsearch
set nocompatible
set smartcase
set termguicolors
set timeout
set timeoutlen=750
set ttimeoutlen=1
set ttyfast

" NOTE: https://vim.fandom.com/wiki/Avoid_the_escape_key#Use_Alt/Meta_In_a_Terminal
" NOTE: https://vimhelp.org/term.txt.html#terminal-options
" NOTE: https://stackoverflow.com/a/58042714 (slow &t_EI)
" Note: This should be set after `set termguicolors` or `set t_Co=256`.
if &term =~ 'xterm' || &term == 'win32'
    " Use DECSCUSR escape sequences
    let &t_SI = "\e[5 q"      " blink bar
    let &t_SR = "\e[3 q"      " blink underline
    let &t_EI = "\e[1 q"      " blink block
    let &t_ti ..= "\e[1 q"    " blink block
    let &t_te ..= "\e[0 q"    " default (depends on terminal, normally blink block)
endif

set autoindent
set backspace=indent,eol,start
set expandtab
set hidden
set noswapfile
set smartindent
set shiftwidth=4
set softtabstop=4
set tabstop=4

" enable syntax and plugins (for netrw)
syntax enable
filetype plugin indent on

" search down into the subfolders
" provides tab-compeltion for file operations
set path+=**

" display all matching files when we tab-complete
set wildmenu

set number
set relativenumber
set cursorline

" netrw tweaks
let g:netrw_banner=0
let g:netrw_browse_split=3
" let g:netrw_browse_split=4
let g:netrw_altv=1
let g:netrw_liststyle=4
" let g:netrw_winsize=25
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\*'
" NOTE: https://stackoverflow.com/questions/8730702/how-do-i-configure-vimrc-so-that-line-numbers-display-in-netrw-in-vim
let g:netrw_bufsettings = 'noma nomod nu nobl nowrap ro'
autocmd BufEnter * silent! lcd %:p:h

" Vim hard mode; disable arrow keys and backspace key; makes your life harder
" set backspace=0

nnoremap <buffer> <Left> <Esc>
nnoremap <buffer> <Right> <Esc>
nnoremap <buffer> <Up> <Esc>
nnoremap <buffer> <Down> <Esc>
nnoremap <buffer> <PageUp> <Esc>
nnoremap <buffer> <PageDown> <Esc>

inoremap <buffer> <Left> <Esc>
inoremap <buffer> <Right> <Esc>
inoremap <buffer> <Up> <Esc>
inoremap <buffer> <Down> <Esc>
inoremap <buffer> <PageUp> <Esc>
inoremap <buffer> <PageDown> <Esc>

vnoremap <buffer> <Left> <Esc>
vnoremap <buffer> <Right> <Esc>
vnoremap <buffer> <Up> <Esc>
vnoremap <buffer> <Down> <Esc>
vnoremap <buffer> <PageUp> <Esc>
vnoremap <buffer> <PageDown> <Esc>

inoremap <leader><leader> <Esc>
vnoremap <leader><leader> <Esc>
nnoremap <leader><leader> <Esc>

" NOTE: https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" NOTE:
" https://github.com/junegunn/vim-plug#example
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'
call plug#begin()
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim',
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'preservim/nerdcommenter'
Plug 'preservim/nerdtree'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
call plug#end()

nnoremap <C-p>t :Buffers<CR>
nnoremap <C-p>. :Files<CR>
nnoremap <C-p>v :GFiles?<CR>
nnoremap <C-p>/ :BLines<CR>
nnoremap <C-p>% :Lines<CR>
nnoremap <C-k><C-t> :Colors<CR>
nnoremap <silent> <leader><space> :nohlsearch<CR>

" Customize fzf colors to match your color scheme
" - fzf#wrap translates this to a set of `--color` options
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" NOTE:
" Enable per-command history
" - History files will be stored in the specified directory
" - When set, CTRL-N and CTRL-P will be bound to 'next-history' and 'previous-history' instead of 'down' and 'up'.
let g:fzf_history_dir = '~/.local/share/fzf-history'

let g:airline#extensions#tmuxline#enabled = 0
let g:airline#extensions#ale#enabled = 1 
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline_powerline_fonts = 0
let g:tmuxline_powerline_separators = 0
let g:airline_section_z = '%l,%v %L'

let g:tmuxline_preset = {
        \ 'a': '#S',
        \ 'b': '#F',
        \ 'c': '#W',
        \ 'win': '#I:#W',
        \ 'cwin': '#I',
        \ 'x': '#{=22:pane_title}',
        \ 'y': '%a,%b %d',
        \ 'z': '%R'}

nnoremap <silent> <leader>] :NERDTreeToggle<CR>
nnoremap <silent> <leader>n :NERDTreeFocus<CR>

function! ToggleZenMode()
    if exists(':Goyo')
        Goyo
    endif
endfunction

function! ToggleFocusMode()
    if exists(':Limelight')
        Limelight!!
    endif
endfunction

nnoremap <silent> <C-k>z :call ToggleZenMode()<CR>
nnoremap <silent> <C-k>zz :call ToggleFocusMode()<CR>

function! s:fzf_neighbouring_files()
  let current_file =expand("%")
  let cwd = fnamemodify(current_file, ':p:h')
  let command = 'ag -g "" -f ' . cwd . ' --depth 0'

  " NOTE: https://github.com/junegunn/fzf/blob/master/README-VIM.md#fzfrun
  call fzf#run({
        \ 'source': command,
        \ 'sink':   'e',
        \ 'options': '-m -x +s',
        \ 'window':  {'width':0.9, 'height':0.6} })
"       \ 'window':  'enew' })
endfunction

command! FZFNeigh call s:fzf_neighbouring_files()

command! -nargs=1 -bang Locate call fzf#run(fzf#wrap(
      \ {'source': 'locate <q-args>', 'options': '-m'}, <bang>0))

nnoremap <silent> <C-p>.. :FZFNeigh<CR>
nnoremap <silent> <leader>y :%w !clip.exe<CR>:echo "Yanked buffer to clipboard"<CR>

" NOTE: https://github.com/junegunn/fzf.vim?tab=readme-ov-file#hide-statusline
autocmd! FileType fzf set laststatus=0 noshowmode noruler
  \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

" let g:airline_theme = 'base16_decaf'
colorscheme base16-gruvbox-dark-soft

nnoremap ; :
vnoremap ; :

" Disable italics in Tinted Vim
let g:tinted_italic = 0

" NOTE: nerdtree
let g:NERDTreeFileLines = 0
" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if winnr() == winnr('h') && bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif

let g:autopep8_max_line_length=120
let g:autopep8_disable_show_diff=1
let g:autopep8_on_save=0

